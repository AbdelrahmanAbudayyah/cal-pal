{"ast":null,"code":"import'../css/logged_out.css';import{createContext,useContext,useEffect,useState}from'react';import WelcomeScreen from'./WelcomeScreen';import LoginScreen from'./LoginScreen';import AccountCreationScreen from'./AccountCreationScreen';import{UserContext}from'../../App';/** \n * The LoginContext only exists when UserContext === null.\n * Holds the user input, whether it's a match or not, as well as the action that the\n * user is doing (to determine what screen to show).\n */import{jsx as _jsx}from\"react/jsx-runtime\";const LoginContext=/*#__PURE__*/createContext(null);const LoggedOutWrapper=()=>{// Set the initial state of the loginContext.\nconst[loginState,setLoginState]=useState({input:{un:\"\",pw:\"\"},match:{un:false,// does the username exist in the database?\npw:false// does password match the given username?\n},action:null// null, \"login\", or \"create\"\n});// Fetch the UserContext.\nconst{userState,setUserState}=useContext(UserContext);// Upon a change in loginState.input, we're going to attempt to login by comparing\n// the user input to the records in the database.\nuseEffect(()=>{/** Calls our login API. */const attemptLogin=async()=>{// Address to our login web service.\nconst uri=encodeURI(\"https://dashboard.heroku.com/apps/cal-pal/auth\");// Do the job!\nconst response=await fetch(uri,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({login:loginState.input})});// This is the object that we want, which holds all the info about\n// the correctness of login info.\nconst obj=await response.json();console.log(\"Logging Response:\",obj);if(obj.error){// Something went wrong. That's ok, just give the user the error message in feedback.\nsetLoginState({...loginState,feedback:obj.error});}else if(obj.success){// Logging in has been successful! You're gonna finish this request, then you're going to call\n// the next API to retrieve public user information.\nconst uri2=encodeURI(\"https://dashboard.heroku.com/apps/cal-pal/user/s/\".concat(loginState.input.un));// Do the job!\nconst response2=await fetch(uri2,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});// This is the object that we want, which holds all the information we need from the response.\nconst obj2=await response2.json();console.log(\"Logging Public User Information:\",obj2);// Update the UserContext, leading to the LoggedInWrapper to take effect.\nconsole.log(\"Updating UserContext\");setUserState({user:obj2.user,loggedIn:true,calendars:[\"65e78634451a8fd7eb403bfe\"]});console.log(userState);}};// Actually call the previously defined function upon attempting to sign in.\nif(loginState.action!==null){console.log(\"Attempting to login.\");attemptLogin();}},[loginState.input]);// The initial value of the LoginContext.\nconst initialValue={loginState,setLoginState};// Determine the content to be shown on the screen.\nlet content;if(loginState.action===null){// User has not chosen what to do.\ncontent=/*#__PURE__*/_jsx(WelcomeScreen,{});}else if(loginState.action===\"login\"){// User wants to log into an existing account.\ncontent=/*#__PURE__*/_jsx(LoginScreen,{});}else if(loginState.action===\"create\"){// User wants to create a new account.\ncontent=/*#__PURE__*/_jsx(AccountCreationScreen,{});}return/*#__PURE__*/_jsx(LoginContext.Provider,{value:initialValue,children:content});};export default LoggedOutWrapper;export{LoginContext};","map":{"version":3,"names":["createContext","useContext","useEffect","useState","WelcomeScreen","LoginScreen","AccountCreationScreen","UserContext","jsx","_jsx","LoginContext","LoggedOutWrapper","loginState","setLoginState","input","un","pw","match","action","userState","setUserState","attemptLogin","uri","encodeURI","response","fetch","method","headers","body","JSON","stringify","login","obj","json","console","log","error","feedback","success","uri2","concat","response2","obj2","user","loggedIn","calendars","initialValue","content","Provider","value","children"],"sources":["/Users/abood/Desktop/Git/Repositories/cal-pal/frontend/src/components/logged_out/LoggedOutWrapper.js"],"sourcesContent":["import '../css/logged_out.css';\n\nimport { createContext, useContext, useEffect, useState } from 'react';\n\nimport WelcomeScreen from './WelcomeScreen';\nimport LoginScreen from './LoginScreen';\nimport AccountCreationScreen from './AccountCreationScreen';\n\nimport { UserContext } from '../../App';\n\n/** \n * The LoginContext only exists when UserContext === null.\n * Holds the user input, whether it's a match or not, as well as the action that the\n * user is doing (to determine what screen to show).\n */\nconst LoginContext = createContext(null);\n\nconst LoggedOutWrapper = () => {\n// Set the initial state of the loginContext.\n  const [loginState, setLoginState] = useState({\n    input: {\n      un: \"\",\n      pw: \"\"\n    },\n    match: {\n      un: false, // does the username exist in the database?\n      pw: false // does password match the given username?\n    },\n    action: null // null, \"login\", or \"create\"\n  });\n\n  // Fetch the UserContext.\n  const { userState, setUserState } = useContext(UserContext);\n\n  // Upon a change in loginState.input, we're going to attempt to login by comparing\n  // the user input to the records in the database.\n  useEffect(() => {\n    /** Calls our login API. */\n    const attemptLogin = async () => {\n      // Address to our login web service.\n      const uri = encodeURI(\"https://dashboard.heroku.com/apps/cal-pal/auth\");\n      // Do the job!\n      const response = await fetch(uri, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          login: loginState.input\n        })\n      });\n      // This is the object that we want, which holds all the info about\n      // the correctness of login info.\n      const obj = await response.json();\n      console.log(\"Logging Response:\", obj);\n\n      if (obj.error){\n        // Something went wrong. That's ok, just give the user the error message in feedback.\n        setLoginState({\n          ...loginState,\n          feedback: obj.error\n        });\n      } else if (obj.success) {\n        // Logging in has been successful! You're gonna finish this request, then you're going to call\n        // the next API to retrieve public user information.\n        const uri2 = encodeURI(`https://dashboard.heroku.com/apps/cal-pal/user/s/${loginState.input.un}`);\n        // Do the job!\n        const response2 = await fetch(uri2, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        // This is the object that we want, which holds all the information we need from the response.\n        const obj2 = await response2.json();\n        console.log(\"Logging Public User Information:\", obj2);\n        // Update the UserContext, leading to the LoggedInWrapper to take effect.\n        console.log(\"Updating UserContext\");\n        setUserState({\n          user: obj2.user,\n          loggedIn: true,\n          calendars: [\n            \"65e78634451a8fd7eb403bfe\",\n          ]\n        });\n        console.log(userState);\n      }\n    };\n\n    // Actually call the previously defined function upon attempting to sign in.\n    if (loginState.action !== null) {\n      console.log(\"Attempting to login.\");\n      attemptLogin();\n    }\n  }, [loginState.input]);\n\n  // The initial value of the LoginContext.\n  const initialValue = { loginState, setLoginState };\n  \n  // Determine the content to be shown on the screen.\n  let content;\n  if (loginState.action === null) {\n    // User has not chosen what to do.\n    content = <WelcomeScreen />;\n  } else if (loginState.action === \"login\") {\n    // User wants to log into an existing account.\n    content = <LoginScreen />;\n  } else if (loginState.action === \"create\") {\n    // User wants to create a new account.\n    content = <AccountCreationScreen />;\n  }\n\n  return (\n    <LoginContext.Provider value={initialValue}>\n      { content }\n    </LoginContext.Provider>\n  );\n};\n\nexport default LoggedOutWrapper;\nexport { LoginContext };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}